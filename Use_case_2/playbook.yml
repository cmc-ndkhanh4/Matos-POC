- name: "playbook"
  hosts: localhost
  vars_files:
    - variables.yml
  tasks:
    - name: Run flask server 
      environment:
        FLASK_RUN_PORT: "{{FLASK_RUN_PORT  }}"
        FLASK_APP: "{{ REPO_DEST }}/{{ FLASK_APP }}"
      shell: "cd {{ REPO_DEST }};.venv/bin/python3 -m flask run&"

    - name: Download cluster describe.
      shell: "curl -X GET 'http://127.0.0.1:8080/resources/aws' -H 'accept: application/json' > '{{ REPO_DEST }}/Use_case_2/test_aws_get_resources.json'"

    - name: get pid of flask server
      shell: "ps -ef | grep -v grep | grep -w '.venv/bin/python3 -m flask run' | awk '{print $2}'"
      register: running_flask

    - name: kill flask server
      shell: "kill -9 {{ item }}"
      with_items: "{{ running_flask.stdout_lines }}"

    - name: Run unit test 2
      shell: "cd {{ REPO_DEST }};.venv/bin/python3 -m unittest Use_case_2/test_aws_get_resources.py"
      ignore_errors: true
      register: eks_kms_setting
      failed_when: false
      changed_when: false

    - name: Run only when kms is not associate
      shell: "aws eks associate-encryption-config --region {{ EKS_REGION }} --cluster-name {{ EKS_CLUSTER_NAME }} --encryption-config '[{\"resources\":[\"secrets\"],\"provider\":{\"keyArn\":\"arn:aws:kms:{{ EKS_REGION }}:{{ ACCOUNT_ID }}:key/{{ KMS_KEY }}\"}}]'"
      when: eks_kms_setting.rc != 0
